/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */

!function(E){var t={};function T(a){if(t[a])return t[a].exports;var e=t[a]={i:a,l:!1,exports:{}};return E[a].call(e.exports,e,e.exports,T),e.l=!0,e.exports}T.m=E,T.c=t,T.d=function(E,t,a){T.o(E,t)||Object.defineProperty(E,t,{enumerable:!0,get:a})},T.r=function(E){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(E,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(E,"__esModule",{value:!0})},T.t=function(E,t){if(1&t&&(E=T(E)),8&t)return E;if(4&t&&"object"==typeof E&&E&&E.__esModule)return E;var a=Object.create(null);if(T.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:E}),2&t&&"string"!=typeof E)for(var e in E)T.d(a,e,function(t){return E[t]}.bind(null,e));return a},T.n=function(E){var t=E&&E.__esModule?function(){return E.default}:function(){return E};return T.d(t,"a",t),t},T.o=function(E,t){return Object.prototype.hasOwnProperty.call(E,t)},T.p="/assets/",T(T.s=15)}({0:function(E,t,T){"use strict";T.d(t,"f",(function(){return b})),T.d(t,"q",(function(){return Y})),T.d(t,"s",(function(){return p})),T.d(t,"r",(function(){return M})),T.d(t,"a",(function(){return _})),T.d(t,"d",(function(){return N})),T.d(t,"p",(function(){return A})),T.d(t,"l",(function(){return s})),T.d(t,"m",(function(){return n})),T.d(t,"e",(function(){return c})),T.d(t,"o",(function(){return C})),T.d(t,"c",(function(){return O})),T.d(t,"i",(function(){return i})),T.d(t,"j",(function(){return l})),T.d(t,"h",(function(){return r})),T.d(t,"k",(function(){return e})),T.d(t,"b",(function(){return R})),T.d(t,"n",(function(){return P})),T.d(t,"g",(function(){return o}));var a={MESSAGE_TYPE:{SETUP_CONNECTOR:"SETUP_CONNECTOR",CONNECTOR_READY:"CONNECTOR_READY",TELEPHONY_EVENT_DISPATCHED:"TELEPHONY_EVENT_DISPATCHED",ACCEPT_CALL:"ACCEPT_CALL",DECLINE_CALL:"DECLINE_CALL",END_CALL:"END_CALL",MUTE:"MUTE",UNMUTE:"UNMUTE",HOLD:"HOLD",RESUME:"RESUME",SET_AGENT_STATUS:"SET_AGENT_STATUS",DIAL:"DIAL",SEND_DIGITS:"SEND_DIGITS",GET_PHONE_CONTACTS:"GET_PHONE_CONTACTS",SWAP_PARTICIPANTS:"SWAP_PARTICIPANTS",ADD_PARTICIPANT:"ADD_PARTICIPANT",CONFERENCE:"CONFERENCE",PAUSE_RECORDING:"PAUSE_RECORDING",RESUME_RECORDING:"RESUME_RECORDING",LOGOUT:"LOGOUT",MESSAGE:"MESSAGE",WRAP_UP_CALL:"WRAP_UP_CALL",AGENT_AVAILABLE:"AGENT_AVAILABLE"},EVENT_TYPE:{QUEUED_CALL_STARTED:"QUEUED_CALL_STARTED",CALL_STARTED:"CALL_STARTED",CALL_CONNECTED:"CALL_CONNECTED",CALL_FAILED:"CALL_FAILED",MUTE_TOGGLE:"MUTE_TOGGLE",HOLD_TOGGLE:"HOLD_TOGGLE",HANGUP:"HANGUP",ERROR:"ERROR",PHONE_CONTACTS:"PHONE_CONTACTS",PARTICIPANT_ADDED:"PARTICIPANT_ADDED",PARTICIPANT_CONNECTED:"PARTICIPANT_CONNECTED",PARTICIPANT_REMOVED:"PARTICIPANT_REMOVED",LOGIN_STARTED:"LOGIN_STARTED",LOGIN_RESULT:"LOGIN_RESULT",LOGOUT_RESULT:"LOGOUT_RESULT",RECORDING_TOGGLE:"RECORDING_TOGGLE",SHOW_LOGIN:"SHOW_LOGIN",SET_AGENT_STATUS_RESULT:"SET_AGENT_STATUS_RESULT",WRAP_UP_ENDED:"WRAP_UP_ENDED",MESSAGE:"MESSAGE",AFTER_CALL_WORK_STARTED:"AFTER_CALL_WORK_STARTED"},ERROR_TYPE:{GENERIC_ERROR:"GENERIC_ERROR",AGENT_ERROR:"AGENT_ERROR",MICROPHONE_NOT_SHARED:"MICROPHONE_NOT_SHARED",UNSUPPORTED_BROWSER:"UNSUPPORTED_BROWSER",AUTHENTICATION_ERROR:"AUTHENTICATION_ERROR",INVALID_AGENT_STATUS:"INVALID_AGENT_STATUS",CAN_NOT_SET_AGENT_STATUS:"CAN_NOT_SET_AGENT_STATUS",LOGIN_REQUIRED:"LOGIN_REQUIRED",CAN_NOT_ACCEPT_THE_CALL:"CAN_NOT_ACCEPT_THE_CALL",CAN_NOT_DECLINE_THE_CALL:"CAN_NOT_DECLINE_THE_CALL",CAN_NOT_END_THE_CALL:"CAN_NOT_END_THE_CALL",CAN_NOT_HOLD_CALL:"CAN_NOT_HOLD_CALL",CAN_NOT_RESUME_CALL:"CAN_NOT_RESUME_CALL",CAN_NOT_MUTE_CALL:"CAN_NOT_MUTE_CALL",CAN_NOT_UNMUTE_CALL:"CAN_NOT_UNMUTE_CALL",INVALID_PARTICIPANT:"INVALID_PARTICIPANT",CAN_NOT_LOG_IN:"CAN_NOT_LOG_IN",CAN_NOT_LOG_OUT:"CAN_NOT_LOG_OUT",INVALID_PARAMS:"INVALID_PARAMS",CAN_NOT_GET_PHONE_CONTACTS:"CAN_NOT_GET_PHONE_CONTACTS",CAN_NOT_SWAP_PARTICIPANTS:"CAN_NOT_SWAP_PARTICIPANTS",CAN_NOT_CONFERENCE:"CAN_NOT_CONFERENCE",INVALID_DESTINATION:"INVALID_DESTINATION",INVALID_PHONE_NUMBER:"INVALID_PHONE_NUMBER",CAN_NOT_HANGUP_PARTICIPANT:"CAN_NOT_HANGUP_PARTICIPANT",CAN_NOT_ADD_PARTICIPANT:"CAN_NOT_ADD_PARTICIPANT",CAN_NOT_CONNECT_PARTICIPANT:"CAN_NOT_CONNECT_PARTICIPANT",CAN_NOT_START_THE_CALL:"CAN_NOT_START_THE_CALL",CAN_NOT_PAUSE_RECORDING:"CAN_NOT_PAUSE_RECORDING",CAN_NOT_RESUME_RECORDING:"CAN_NOT_RESUME_RECORDING"},AGENT_STATUS:{ONLINE:"Online",OFFLINE:"Offline",ACW:"AfterCallWork"},PARTICIPANT_TYPE:{AGENT:"Agent",INITIAL_CALLER:"Initial_Caller",THIRD_PARTY:"Third_Party"},CALL_TYPE:{INBOUND:"Inbound",OUTBOUND:"Outbound",ADD_PARTICIPANT:"AddParticipant"},CONTACT_TYPE:{PHONEBOOK:"PhoneBook",QUEUE:"Queue",PHONENUMBER:"PhoneNumber"},CAPABILITY_TYPE:{SHOW_AGENT_SETTINGS:"SHOW_AGENT_SETTINGS",MUTE:"MUTE",RECORD:"RECORD",MERGE:"MERGE",SWAP:"SWAP"},CALL_STATE:{RINGING:"ringing",CONNECTED:"connected",TRANSFERRING:"transferring",TRANSFERRED:"transferred",ENDED:"ended"}};class e{constructor({isMuted:E}){this.isMuted=E}}class _{constructor({activeCalls:E=[]}){E.length>0&&E.forEach(E=>{I.validateClassObject(E,P)}),this.activeCalls=E}}class N{constructor({hasMute:E=!0,hasRecord:t=!0,hasMerge:T=!0,hasSwap:a=!0}){this.hasMute=E,this.hasRecord=t,this.hasMerge=T,this.hasSwap=a}}class A{constructor({isRecordingPaused:E,contactId:t=null,initialContactId:T=null,instanceId:a=null,region:e=null}){this.isRecordingPaused=E,this.contactId=t,this.initialContactId=T,this.instanceId=a,this.region=e}}class s{constructor({reason:E="",participantType:t}){this.reason=E,this.participantType=t}}class n{constructor({initialCallHasEnded:E,callInfo:t,phoneNumber:T,callId:a}){I.validateClassObject(t,R),this.initialCallHasEnded=E,this.callInfo=t,this.phoneNumber=T,this.callId=a}}class c{constructor({isThirdPartyOnHold:E,isCustomerOnHold:t}){this.isThirdPartyOnHold=E,this.isCustomerOnHold=t}}class C{constructor({contacts:E=[]}){E.length>0&&E.forEach(E=>{I.validateClassObject(E,o)}),this.contacts=E}}class O{constructor({call:E}){I.validateClassObject(E,P),this.call=E}}class i{constructor({isThirdPartyOnHold:E,isCustomerOnHold:t,calls:T}){Object.values(T).forEach(E=>{I.validateClassObject(E,P)}),this.isThirdPartyOnHold=E,this.isCustomerOnHold=t,this.calls=T}}class l{constructor({showLogin:E=!1,loginFrameHeight:t=350}){this.showLogin=E,this.loginFrameHeight=t}}class r{constructor({success:E}){this.success=E}}class R{constructor({callStateTimestamp:E=null,isOnHold:t}){E&&I.validateDate(E),this.callStateTimestamp=E,this.isOnHold=t}}class o{constructor({phoneNumber:E,id:t,type:T,name:e,prefix:_,extension:N}){E&&I.validateString(E),T&&I.validateEnum(T,Object.values(a.CONTACT_TYPE)),t&&I.validateString(t),e&&I.validateString(e),_&&I.validateString(_),N&&I.validateString(N),this.phoneNumber=E,this.id=t,this.type=T,this.name=e,this.prefix=_,this.extension=N}}class P{constructor({callId:E,callType:t,contact:T,state:e,callAttributes:_,phoneNumber:N,callInfo:A}){I.validateString(E).validateEnum(t?t.charAt(0).toUpperCase()+t.slice(1):t,Object.values(a.CALL_TYPE)).validateString(e).validateObject(_),N?(I.validateString(N),T&&I.validateClassObject(T,o)):I.validateClassObject(T,o),this.callId=E,this.callType=t,this.contact=T,this.state=e,this.callAttributes=_,this.phoneNumber=N,this.callInfo=A}}class I{static validateString(E){if("string"!=typeof E)throw new Error("Invalid argument. Expecting a string but got "+typeof E);return this}static validateBoolean(E){if("boolean"!=typeof E)throw new Error("Invalid argument. Expecting a boolean but got "+typeof E);return this}static validateObject(E){if("object"!=typeof E)throw new Error("Invalid argument. Expecting an object but got "+typeof E);return this}static validateEnum(E,t){if(!t.includes(E))throw new Error(`Invalid argument. Expecting a value from ${JSON.stringify(t)} but got ${E}`);return this}static validateDate(E){if(!(E instanceof Date))throw new Error("Invalid argument. Expecting a Date object but got "+typeof E);return this}static validateClassObject(E,t){if(!(E instanceof t))throw new Error("Invalid className. Expecting object of class "+t);return this}}let L,S,d;function u(E,t){console.error("SCV dispatched error "+E,t),G(a.EVENT_TYPE.ERROR,{message:a.ERROR_TYPE[E]})}function G(E,t){L.postMessage({type:a.MESSAGE_TYPE.TELEPHONY_EVENT_DISPATCHED,payload:{telephonyEventType:E,telephonyEventPayload:t}})}async function D(){const E=await S.getCapabilities();I.validateClassObject(E,N),L.postMessage({type:a.MESSAGE_TYPE.CONNECTOR_READY,payload:{capabilities:{[a.CAPABILITY_TYPE.MUTE]:E.hasMute,[a.CAPABILITY_TYPE.RECORD]:E.hasRecord,[a.CAPABILITY_TYPE.MERGE]:E.hasMerge,[a.CAPABILITY_TYPE.SWAP]:E.hasSwap}}})}async function U(E){switch(E.data.type){case a.MESSAGE_TYPE.ACCEPT_CALL:try{if(E.data.call&&E.data.call.callType&&E.data.call.callType.toLowerCase()===a.CALL_TYPE.OUTBOUND.toLowerCase())return;const t=await S.acceptCall(E.data.call);I.validateClassObject(t,O);const{call:T}=t;G(a.EVENT_TYPE.CALL_CONNECTED,T)}catch(E){u(a.ERROR_TYPE.CAN_NOT_ACCEPT_THE_CALL,E)}break;case a.MESSAGE_TYPE.DECLINE_CALL:try{const t=await S.declineCall(E.data.call);I.validateClassObject(t,O);const{call:T}=t;G(a.EVENT_TYPE.HANGUP,T)}catch(E){u(a.ERROR_TYPE.CAN_NOT_DECLINE_THE_CALL,E)}break;case a.MESSAGE_TYPE.END_CALL:try{const t=await S.endCall(E.data.call,E.data.agentStatus);I.validateClassObject(t,O);const T=await S.getActiveCalls();I.validateClassObject(T,_);const e=T.activeCalls,{call:N}=t;0===e.length&&G(a.EVENT_TYPE.HANGUP,N)}catch(E){u(a.ERROR_TYPE.CAN_NOT_END_THE_CALL,E)}break;case a.MESSAGE_TYPE.MUTE:try{const E=await S.mute();I.validateClassObject(E,e),G(a.EVENT_TYPE.MUTE_TOGGLE,{isMuted:E.isMuted})}catch(E){u(a.ERROR_TYPE.CAN_NOT_MUTE_CALL,E)}break;case a.MESSAGE_TYPE.UNMUTE:try{const E=await S.unmute();I.validateClassObject(E,e),G(a.EVENT_TYPE.MUTE_TOGGLE,{isMuted:E.isMuted})}catch(E){u(a.ERROR_TYPE.CAN_NOT_UNMUTE_CALL,E)}break;case a.MESSAGE_TYPE.HOLD:try{const t=await S.hold(E.data.call);I.validateClassObject(t,i);const{isThirdPartyOnHold:T,isCustomerOnHold:e,calls:_}=t;G(a.EVENT_TYPE.HOLD_TOGGLE,{isThirdPartyOnHold:T,isCustomerOnHold:e,calls:_})}catch(E){u(a.ERROR_TYPE.CAN_NOT_HOLD_CALL,E)}break;case a.MESSAGE_TYPE.RESUME:try{const t=await S.resume(E.data.call);I.validateClassObject(t,i);const{isThirdPartyOnHold:T,isCustomerOnHold:e,calls:_}=t;G(a.EVENT_TYPE.HOLD_TOGGLE,{isThirdPartyOnHold:T,isCustomerOnHold:e,calls:_})}catch(E){u(a.ERROR_TYPE.CAN_NOT_RESUME_CALL,E)}break;case a.MESSAGE_TYPE.SET_AGENT_STATUS:try{const t=await S.setAgentStatus(E.data.agentStatus);I.validateClassObject(t,r);const{success:T}=t;G(a.EVENT_TYPE.SET_AGENT_STATUS_RESULT,{success:T})}catch(E){u(a.ERROR_TYPE.CAN_NOT_SET_AGENT_STATUS,E)}break;case a.MESSAGE_TYPE.DIAL:try{const t=await S.dial(new o(E.data.contact));I.validateClassObject(t,O);const{call:T}=t;G(a.EVENT_TYPE.CALL_STARTED,T)}catch(E){G(a.EVENT_TYPE.CALL_FAILED),u(a.ERROR_TYPE.CAN_NOT_START_THE_CALL,E)}break;case a.MESSAGE_TYPE.SEND_DIGITS:await S.sendDigits(E.data.digits);break;case a.MESSAGE_TYPE.GET_PHONE_CONTACTS:try{const t=await S.getPhoneContacts(E.data.filter);I.validateClassObject(t,C);const T=t.contacts.map(E=>({id:E.id,endpointARN:E.endpointARN,phoneNumber:E.phoneNumber,name:E.name,type:E.type}));G(a.EVENT_TYPE.PHONE_CONTACTS,{contacts:T})}catch(E){u(a.ERROR_TYPE.CAN_NOT_GET_PHONE_CONTACTS,E)}break;case a.MESSAGE_TYPE.SWAP_PARTICIPANTS:try{const t=await S.swap(E.data.callToHold,E.data.callToResume);I.validateClassObject(t,i);const{isThirdPartyOnHold:T,isCustomerOnHold:e,calls:_}=t;G(a.EVENT_TYPE.HOLD_TOGGLE,{isThirdPartyOnHold:T,isCustomerOnHold:e,calls:_})}catch(E){u(a.ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS,E)}break;case a.MESSAGE_TYPE.CONFERENCE:try{const t=await S.conference(E.data.calls);I.validateClassObject(t,c);const{isThirdPartyOnHold:T,isCustomerOnHold:e}=t;G(a.EVENT_TYPE.HOLD_TOGGLE,{isThirdPartyOnHold:T,isCustomerOnHold:e})}catch(E){u(a.ERROR_TYPE.CAN_NOT_CONFERENCE,E)}break;case a.MESSAGE_TYPE.ADD_PARTICIPANT:try{const t=await S.addParticipant(new o(E.data.contact),E.data.call);I.validateClassObject(t,n);const{initialCallHasEnded:T,callInfo:e,phoneNumber:_,callId:N}=t;G(a.EVENT_TYPE.PARTICIPANT_ADDED,{initialCallHasEnded:T,callInfo:e,phoneNumber:_,callId:N})}catch(E){u(a.ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT,E)}break;case a.MESSAGE_TYPE.PAUSE_RECORDING:try{const t=await S.pauseRecording(E.data.call);I.validateClassObject(t,A);const{isRecordingPaused:T,contactId:e,initialContactId:_,instanceId:N,region:s}=t;G(a.EVENT_TYPE.RECORDING_TOGGLE,{isRecordingPaused:T,contactId:e,initialContactId:_,instanceId:N,region:s})}catch(E){u(a.ERROR_TYPE.CAN_NOT_PAUSE_RECORDING,E)}break;case a.MESSAGE_TYPE.RESUME_RECORDING:try{const t=await S.resumeRecording(E.data.call);I.validateClassObject(t,A);const{isRecordingPaused:T,contactId:e,initialContactId:_,instanceId:N,region:s}=t;G(a.EVENT_TYPE.RECORDING_TOGGLE,{isRecordingPaused:T,contactId:e,initialContactId:_,instanceId:N,region:s})}catch(E){u(a.ERROR_TYPE.CAN_NOT_RESUME_RECORDING,E)}break;case a.MESSAGE_TYPE.LOGOUT:try{const E=await S.logout();I.validateClassObject(E,r);const{success:t}=E;G(a.EVENT_TYPE.LOGOUT_RESULT,{success:t})}catch(E){u(a.ERROR_TYPE.CAN_NOT_LOG_OUT,E)}break;case a.MESSAGE_TYPE.MESSAGE:S.handleMessage(E.data.message);break;case a.MESSAGE_TYPE.WRAP_UP_CALL:S.wrapUpCall(E.data.call);break;case a.MESSAGE_TYPE.AGENT_AVAILABLE:if(d=E.data.isAvailable,d){const E=await S.getActiveCalls();I.validateClassObject(E,_);const t=E.activeCalls;for(const E in t){const T=t[E];switch(T.isReplayedCall=!0,T.state){case a.CALL_STATE.CONNECTED:G(a.EVENT_TYPE.CALL_CONNECTED,T);break;case a.CALL_STATE.RINGING:G(a.EVENT_TYPE.CALL_STARTED,T);break;case a.CALL_STATE.TRANSFERRING:G(a.EVENT_TYPE.PARTICIPANT_ADDED,{phoneNumber:T.contact.phoneNumber,callInfo:T.callInfo,initialCallHasEnded:T.callAttributes.initialCallHasEnded,callId:T.callId});break;case a.CALL_STATE.TRANSFERRED:G(a.EVENT_TYPE.PARTICIPANT_CONNECTED,{phoneNumber:T.contact.phoneNumber,callInfo:T.callInfo,initialCallHasEnded:T.callAttributes.initialCallHasEnded,callId:T.callId})}}}}}async function h(E){switch(E.data.type){case a.MESSAGE_TYPE.SETUP_CONNECTOR:L=E.ports[0],L.onmessage=U;try{const t=await S.init(E.data.connectorConfig);I.validateClassObject(t,l),t.showLogin?G(a.EVENT_TYPE.SHOW_LOGIN,{loginFrameHeight:t.loginFrameHeight}):await D()}catch(E){u(a.ERROR_TYPE.CAN_NOT_LOG_IN,E)}window.removeEventListener("message",h)}}const b={EVENT_TYPE:{LOGIN_RESULT:a.EVENT_TYPE.LOGIN_RESULT,LOGOUT_RESULT:a.EVENT_TYPE.LOGOUT_RESULT,CALL_STARTED:a.EVENT_TYPE.CALL_STARTED,CALL_CONNECTED:a.EVENT_TYPE.CALL_CONNECTED,HANGUP:a.EVENT_TYPE.HANGUP,PARTICIPANT_CONNECTED:a.EVENT_TYPE.PARTICIPANT_CONNECTED,PARTICIPANT_REMOVED:a.EVENT_TYPE.PARTICIPANT_REMOVED,MESSAGE:a.EVENT_TYPE.MESSAGE,REMOTE_CONTROLLER:"REMOTE_CONTROLLER"},AGENT_STATUS:{...a.AGENT_STATUS},PARTICIPANT_TYPE:{...a.PARTICIPANT_TYPE},CALL_TYPE:{...a.CALL_TYPE},CONTACT_TYPE:{...a.CONTACT_TYPE},CALL_STATE:{...a.CALL_STATE}};function Y(E){S=E,window.addEventListener("message",h)}async function p({eventType:E,payload:t}){switch(E){case b.EVENT_TYPE.LOGIN_RESULT:try{I.validateClassObject(t,r);const{success:E}=t;G(a.EVENT_TYPE.LOGIN_RESULT,{success:E}),E&&await D()}catch(E){u(a.ERROR_TYPE.CAN_NOT_LOG_IN,E)}break;case b.EVENT_TYPE.LOGOUT_RESULT:try{I.validateClassObject(t,r),G(a.EVENT_TYPE.LOGOUT_RESULT,{success:t.success})}catch(E){u(a.ERROR_TYPE.CAN_NOT_LOG_OUT,E)}break;case b.EVENT_TYPE.CALL_STARTED:try{I.validateClassObject(t,O),G(a.EVENT_TYPE.CALL_STARTED,t.call)}catch(E){u(a.ERROR_TYPE.CAN_NOT_START_THE_CALL,E)}break;case b.EVENT_TYPE.CALL_CONNECTED:try{I.validateClassObject(t,O),G(a.EVENT_TYPE.CALL_CONNECTED,t.call)}catch(E){u(a.ERROR_TYPE.CAN_NOT_START_THE_CALL,E)}break;case b.EVENT_TYPE.HANGUP:try{I.validateClassObject(t,O),G(a.EVENT_TYPE.HANGUP,t.call)}catch(E){u(a.ERROR_TYPE.CAN_NOT_END_THE_CALL,E)}break;case b.EVENT_TYPE.PARTICIPANT_CONNECTED:try{I.validateClassObject(t,n);const{initialCallHasEnded:E,callInfo:T,phoneNumber:e,callId:_}=t;G(a.EVENT_TYPE.PARTICIPANT_CONNECTED,{initialCallHasEnded:E,callInfo:T,phoneNumber:e,callId:_})}catch(E){u(a.ERROR_TYPE.CAN_NOT_CONNECT_PARTICIPANT,E)}break;case b.EVENT_TYPE.PARTICIPANT_REMOVED:try{I.validateClassObject(t,s);const{reason:E,participantType:T}=t,e=await S.getActiveCalls();I.validateClassObject(e,_);const N=e.activeCalls;if(0===N.length)G(a.EVENT_TYPE.HANGUP);else if(T===a.PARTICIPANT_TYPE.INITIAL_CALLER){const E=Object.values(N).filter(E=>E.callType===a.CALL_TYPE.ADD_PARTICIPANT).pop();G(E.state===a.CALL_STATE.TRANSFERRING?a.EVENT_TYPE.PARTICIPANT_ADDED:a.EVENT_TYPE.PARTICIPANT_CONNECTED,{initialCallHasEnded:!0})}else G(a.EVENT_TYPE.PARTICIPANT_REMOVED,{reason:E})}catch(E){u(a.ERROR_TYPE.CAN_NOT_HANGUP_PARTICIPANT,E)}break;case b.EVENT_TYPE.MESSAGE:G(a.EVENT_TYPE.MESSAGE,t);break;case b.EVENT_TYPE.REMOTE_CONTROLLER:U(t)}}function M(){return d}},1:function(E,t,T){"use strict";var a=T(2),e=T.n(a),_=T(0);function N(E,t){var T=Object.keys(E);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(E);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(E,t).enumerable}))),T.push.apply(T,a)}return T}t.a={LOGIN_SUBMIT:"LOGIN_SUBMIT",SHOW_LOGIN_PAGE:"SHOW_LOGIN_PAGE",GET_SHOW_LOGIN_PAGE:"GET_SHOW_LOGIN_PAGE",SET_SHOW_LOGIN_PAGE:"SET_SHOW_LOGIN_PAGE",CAPABILITIES:"CAPABILITIES",GET_CAPABILITIES:"GET_CAPABILITIES",SET_CAPABILITIES:"SET_CAPABILITIES",START_INBOUND_CALL:"START_INBOUND_CALL",CONNECT_PARTICIPANT:"CONNECT_PARTICIPANT",REMOVE_PARTICIPANT:"REMOVE_PARTICIPANT",CONNECT_CALL:"CONNECT_CALL",HANGUP:"HANGUP",GET_PHONE_CONTACTS:"GET_PHONE_CONTACTS",SOFTPHONE_LOGOUT:"SOFTPHONE_LOGOUT",CREATE_TRANSCRIPTION:"SEND_TRANSCRIPTION",INBOUND_CALL_TYPE:"inbound",MESSAGE_FROM_CONNECTOR:"MESSAGE_FROM_CONNECTOR",MESSAGE_TO_CONNECTOR:"MESSAGE_TO_CONNECTOR",SENDER_TYPE:{END_USER:"END_USER",HUMAN_AGENT:"HUMAN_AGENT",VIRTUAL_AGENT:"VIRTUAL_AGENT"},PARTICIPANT_TYPE:function(E){for(var t=1;t<arguments.length;t++){var T=null!=arguments[t]?arguments[t]:{};t%2?N(Object(T),!0).forEach((function(t){e()(E,t,T[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(E,Object.getOwnPropertyDescriptors(T)):N(Object(T)).forEach((function(t){Object.defineProperty(E,t,Object.getOwnPropertyDescriptor(T,t))}))}return E}({},_.f.PARTICIPANT_TYPE),SEND_RECORDING:"SEND_RECORDING",LOGIN_RESULT:"LOGIN_RESULT",LOGOUT_RESULT:"LOGOUT_RESULT",CALL_CONNECTED:"CALL_CONNECTED",THROW_ERROR:"THROW_ERROR",PARTICIPANT_CONNECTED:"PARTICIPANT_CONNECTED",PARTICIPANT_REMOVED:"PARTICIPANT_REMOVED",MESSAGE:"MESSAGE",REMOTE_CONTROLLER:"REMOTE_CONTROLLER",MESSAGE_TYPE:{ACCEPT_CALL:"ACCEPT_CALL",DECLINE_CALL:"DECLINE_CALL",END_CALL:"END_CALL",MUTE:"MUTE",UNMUTE:"UNMUTE",HOLD:"HOLD",RESUME:"RESUME",SET_AGENT_STATUS:"SET_AGENT_STATUS",DIAL:"DIAL",SEND_DIGITS:"SEND_DIGITS",GET_PHONE_CONTACTS:"GET_PHONE_CONTACTS",SWAP_PARTICIPANTS:"SWAP_PARTICIPANTS",ADD_PARTICIPANT:"ADD_PARTICIPANT",CONFERENCE:"CONFERENCE",PAUSE_RECORDING:"PAUSE_RECORDING",RESUME_RECORDING:"RESUME_RECORDING",LOGOUT:"LOGOUT",MESSAGE:"MESSAGE"}}},15:function(E,t,T){"use strict";T.r(t);var a=T(1),e=document.getElementById("submit"),_=document.getElementById("preview"),N=document.getElementById("password"),A=document.getElementById("show-password-container"),s=document.getElementById("hide-password-container"),n=!1;_.addEventListener("click",(function(){(n=!n)?(N.type="text",A.style.display="none",s.style.display="block"):(N.type="password",s.style.display="none",A.style.display="block")})),e.addEventListener("click",(function(){var E=document.getElementById("username").value,t=document.getElementById("password").value,T="test"===E&&"test"===t;new BroadcastChannel("rc-request").postMessage({type:a.a.LOGIN_SUBMIT,success:T})}))},2:function(E,t){E.exports=function(E,t,T){return t in E?Object.defineProperty(E,t,{value:T,enumerable:!0,configurable:!0,writable:!0}):E[t]=T,E}}});
//# sourceMappingURL=login.bundle.js.map